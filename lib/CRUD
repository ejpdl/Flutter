import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

void main() {
  runApp(const MainApp());
}

class MainApp extends StatelessWidget {
  const MainApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      debugShowCheckedModeBanner: false,
      home: myHomePage(),
    );
  }
}

class myHomePage extends StatefulWidget {
  const myHomePage({super.key});

  @override
  _MainState createState() => _MainState();
}

class _MainState extends State<myHomePage> {

  List<Map<String, dynamic>> _data = [];

  TextEditingController _searchController = TextEditingController();

  @override
  void initState() {

    super.initState();
    _getData();

  }

  // Fetch and search data
  Future<void> _getData([String query = '']) async {

    var url = "http://127.0.0.1:5000/userdata/view_all";

    if (query.isNotEmpty) {

      url = "http://127.0.0.1:5000/userdata/view/${query}";

    }
     
    try {

      final response = await http.get(

        Uri.parse(url),
        headers: <String, String>{

          'Content-Type': 'application/json; charset=UTF-8',

        },

      );

      if (response.statusCode == 200) {

        final List<dynamic> data = jsonDecode(response.body);

        setState(() {

          _data = List<Map<String, dynamic>>.from(data);

        });

      } else {

        print('Failed to load employees: ${response.statusCode}');

      }
      
    } catch (e) {

      print('Error occurred: $e');

    }

  }

  // Delete function
  Future<void> _deleteEmployee(int id) async {

    var url = "http://127.0.0.1:5000/userdata/delete";

    final response = await http.delete(

      Uri.parse(url),
      headers: <String, String>{

        'Content-Type': 'application/json; charset=UTF-8',

      },

      body: jsonEncode({'id': id}),

    );

    if (response.statusCode == 200) {

      setState(() {

        _data.removeWhere((element) => element['id'] == id);

      });

    } else {

      print('Failed to delete employee: ${response.statusCode}');

    }

  }

  // Confirm delete dialog
  Future<void> _showDeleteConfirmationDialog(int id) async {
    return showDialog<void>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Confirm Deletion'),
          content: const Text('Are you sure you want to delete this employee?'),
          actions: <Widget>[
            TextButton(
              child: const Text('Cancel'),
              onPressed: () {
                Navigator.of(context).pop(); // Close the dialog
              },
            ),
            TextButton(
              child: const Text('Delete'),
              onPressed: () async {
                Navigator.of(context).pop(); // Close the dialog
                await _deleteEmployee(id); // Perform the delete action
              },
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Employee List'),
      ),
      body: Column(
        children: [
          // Search Bar
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: TextField(
              controller: _searchController,
              decoration: InputDecoration(
                hintText: 'Search...',
                suffixIcon: IconButton(
                  icon: Icon(Icons.search),
                  onPressed: () {
                    _getData(_searchController.text);
                  },
                ),
              ),
              onSubmitted: (value) {
                _getData(value);
              },
            ),
          ),
          // Employee List View
          Expanded(
            child: ListView.builder(
              itemCount: _data.length,
              itemBuilder: (context, index) {
                final employee = _data[index];
                return ListTile(
                  onTap: () async {
                    final result = await Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => EmployeeScreen(
                          employeeData: _data[index],
                        ),
                      ),
                    );
                    if (result == true) {
                      await _getData(); // Refresh the data after editing
                    }
                  },
                  title: Text(employee["first_name"]),
                  subtitle: Text(employee["last_name"]),
                  trailing: IconButton(
                    icon: const Icon(Icons.delete, color: Colors.red),
                    onPressed: () async {
                      await _showDeleteConfirmationDialog(employee['id']);
                    },
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

// Employee Screen for Update
class EmployeeScreen extends StatefulWidget {

  final Map<String, dynamic> employeeData;
  const EmployeeScreen({super.key, required this.employeeData});

  @override
  _EmployeeScreenState createState() => _EmployeeScreenState();

}

class _EmployeeScreenState extends State<EmployeeScreen> {

  final _formKey = GlobalKey<FormState>();
  late TextEditingController _idNameController;
  late TextEditingController _firstNameController;
  late TextEditingController _lastNameController;
  late TextEditingController _emailController;
  late TextEditingController _genderController;

  @override
  void initState() {

    super.initState();

    _idNameController = TextEditingController(text: widget.employeeData["id"].toString());
    _firstNameController = TextEditingController(text: widget.employeeData["first_name"]);
    _lastNameController = TextEditingController(text: widget.employeeData["last_name"]);
    _emailController = TextEditingController(text: widget.employeeData["email"]);
    _genderController = TextEditingController(text: widget.employeeData["gender"]);
  }

  Future<void> _updateEmployee() async {

    if (_formKey.currentState?.validate() ?? false) {

      final updatedData = {

        'id': _idNameController.text,
        'fname': _firstNameController.text,
        'lname': _lastNameController.text,
        'email': _emailController.text,
        'gender': _genderController.text,

      };

      var url = 'http://127.0.0.1:5000/userdata/update';

      final response = await http.put(

        Uri.parse(url),
        headers: <String, String>{

          'Content-Type': 'application/json; charset=UTF-8',

        },

        body: jsonEncode(updatedData),

      );

      if (response.statusCode == 200) {
        
        Navigator.pop(context, true);

      } else {

        print('Failed to update employee: ${response.statusCode}');

      }

    }

  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Employee Details'),
        actions: [
          IconButton(
            icon: const Icon(Icons.edit),
            onPressed: () {
              showDialog(
                context: context,
                builder: (context) {
                  return AlertDialog(
                    title: const Text('Edit Employee'),
                    content: Form(
                      key: _formKey,
                      child: Column(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          TextFormField(
                            readOnly: true,
                            controller: _idNameController,
                            decoration: const InputDecoration(labelText: 'ID'),
                            validator: (value) {
                              if (value == null || value.isEmpty) {
                                return 'Please enter the ID';
                              }
                              return null;
                            },
                          ),
                          TextFormField(
                            controller: _firstNameController,
                            decoration:
                                const InputDecoration(labelText: 'First Name'),
                            validator: (value) {
                              if (value == null || value.isEmpty) {
                                return 'Please enter the first name';
                              }
                              return null;
                            },
                          ),
                          TextFormField(
                            controller: _lastNameController,
                            decoration:
                                const InputDecoration(labelText: 'Last Name'),
                            validator: (value) {
                              if (value == null || value.isEmpty) {
                                return 'Please enter the last name';
                              }
                              return null;
                            },
                          ),
                          TextFormField(
                            controller: _emailController,
                            decoration:
                                const InputDecoration(labelText: 'Email'),
                            validator: (value) {
                              if (value == null || value.isEmpty) {
                                return 'Please enter the email';
                              }
                              return null;
                            },
                          ),
                          TextFormField(
                            controller: _genderController,
                            decoration:
                                const InputDecoration(labelText: 'Gender'),
                            validator: (value) {
                              if (value == null || value.isEmpty) {
                                return 'Please enter the gender';
                              }
                              return null;
                            },
                          ),
                        ],
                      ),
                    ),
                    actions: [
                      TextButton(
                        onPressed: () {
                          Navigator.pop(context); // Close dialog
                        },
                        child: const Text('Cancel'),
                      ),
                      TextButton(
                        onPressed: () async {
                          await _updateEmployee(); // Update employee
                        },
                        child: const Text('Save'),
                      ),
                    ],
                  );
                },
              );
            },
          )
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('ID: ${widget.employeeData["id"]}'),
            const SizedBox(height: 8),
            Text('First Name: ${widget.employeeData["first_name"]}'),
            const SizedBox(height: 8),
            Text('Last Name: ${widget.employeeData["last_name"]}'),
            const SizedBox(height: 8),
            Text('Email: ${widget.employeeData["email"]}'),
            const SizedBox(height: 8),
            Text('Gender: ${widget.employeeData["gender"]}'),
          ],
        ),
      ),
    );
  }
}
